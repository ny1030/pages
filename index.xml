<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ny1030.github.io</title>
    <link>https://ny1030.github.io/pages/</link>
    <description>Recent content on ny1030.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 07 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ny1030.github.io/pages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS CLI Snapshot Commands</title>
      <link>https://ny1030.github.io/pages/posts/engineering/aws-cli-snapshot-commands/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/aws-cli-snapshot-commands/</guid>
      <description>特定のvolumeIdのSnapshot一覧を確認したい時 取得日時が新しい順に表示されてそう aws ec2 describe-snapshots --filters Name=&amp;#34;volume-id,Values=${volume}&amp;#34; describe-snapshots — AWS CLI 2.7.29 Command Reference</description>
    </item>
    
    <item>
      <title>Dockerで起動してないコンテナにログインする方法</title>
      <link>https://ny1030.github.io/pages/posts/engineering/docker%E3%81%A7%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%AA%E3%81%84%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AB%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 24 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/docker%E3%81%A7%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%AA%E3%81%84%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AB%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
      <description>背景 Dockerにログインして、ディレクトリの構造などを確認したい場合、一般的なやり方だと以下のように起動しているコンテナのidを調べてログインをしている。
docker run {container_name} docker ps docker exec -it {container_id} /bin/sh こちらの方法だと、Dockerfileで指定しているコマンドが起動直後に終了する場合、docker ps してもコンテナが既に終了しており、ログイン出来ないという事がある。
方法 docker run のオプションで -it を指定することで、コンテナが終了してもログイン出来るようになる。-it はそれぞれ独立したオプションで、-i(interactive) , -t(tty)
コマンドとしては以下のような感じ：
docker run -it --entrypoint /bin/sh {container_name} container_name は docker images で確認。docker build -t {name}:{tag} でビルド時に名前を指定可能。 docker composeの場合 docker composeでも同様の事をしたい場合は、docker-compose.yamlで以下のオプションを追加すればよい。
tty: true stdin_open: true * service.{service_name} の階層に書く 参考 Docker run リファレンス</description>
    </item>
    
    <item>
      <title>influxDB 関連コマンド</title>
      <link>https://ny1030.github.io/pages/posts/engineering/influxdb-%E9%96%A2%E9%80%A3%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/</link>
      <pubDate>Wed, 24 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/influxdb-%E9%96%A2%E9%80%A3%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/</guid>
      <description>データベース作成 curl -i -XPOST http://localhost:8086/query --data-urlencode &amp;#34;q=CREATE DATABASE mydb&amp;#34; Smapleデータ書き込み curl -i -XPOST &amp;#39;http://localhost:8086/write?db=mydb&amp;#39; --data-binary &amp;#39;cpu_load_short,host=server01,region=us-west value=0.64 1434055562000000000&amp;#39; 参考 Write data with the InfluxDB API</description>
    </item>
    
    <item>
      <title>Hugoで特定のファイルを公開しない方法</title>
      <link>https://ny1030.github.io/pages/posts/engineering/hugo%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%85%AC%E9%96%8B%E3%81%97%E3%81%AA%E3%81%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/hugo%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%85%AC%E9%96%8B%E3%81%97%E3%81%AA%E3%81%84%E6%96%B9%E6%B3%95/</guid>
      <description>はじめに Hugo（静的サイトジェネレーター）でブログを書いてる際に、諸々の事情で公開したくないページが公開されてしまう事例があった。厳密にいうと、TOPページに出てくる記事の一覧からは見えないが、検索ボックスからそのページに含むキーワードを検索するとそのページが出てきてしまっていた。
フォルダ構成の例 例として、Hugoの記事を格納しているフォルダ構成は以下の通り。
. ├── archetypes └── content ├── posts │ └── engineering &amp;lt;--- 公開したい記事 ├── private. &amp;lt;--- ディレクトリ単位で公開したくない記事（今回の対象） └── template. │ └── template.md &amp;lt;--- ファイル単位で公開したくない記事（今回の対象） 今回は content/private のフォルダに入っている記事および content/template/template.md というファイルを公開したくないので、その設定方法を考える。
設定方法 方法1. configファイルに指定 Hugoの設定ファイルである config.yaml に ignoreFiles ディレクティブを追加する。 ※ 設定ファイルの形式が TOMLの場合は config.toml に読み換えてください。
ignoreFiles: - content/template/template\.md$ - content/private/.*$ 1つ目が content/template/template.md を公開しない設定でこれはほぼそのまま書けば良い。.（ドット）をエスケープ処理する必要があるため、\（バックスラッシュ）を入れている。 2つ目がcontent/privateを公開しない設定であり、こちらは正規表現を使っている。ディレクトリ内のファイルを全て公開したくないので、 .* としている。
上記設定により、検索しても記事が出てこないことを確認。記事のURLに直アクセスした場合も404が出ることを確認。
方法2. frontmatterを使う Hugoで使える frontmatterを確認し、draft という変数を true にすれば下書きの記事として認識されるので、公開されない。 以下のように公開したくない記事の先頭に以下のスニペットを書けば良い。frontmatterはダッシュ（&amp;mdash;）も上下に書く必要があるので注意。
--- draft: true --- 上記設定により、同様に検索しても記事が出てこないことを確認。</description>
    </item>
    
    <item>
      <title>Bitnamiで構築したサイトにletsencryptを導入する手順</title>
      <link>https://ny1030.github.io/pages/posts/engineering/bitnami%E3%81%A7%E6%A7%8B%E7%AF%89%E3%81%97%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%ABletsencrypt%E3%82%92%E5%B0%8E%E5%85%A5/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/bitnami%E3%81%A7%E6%A7%8B%E7%AF%89%E3%81%97%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%ABletsencrypt%E3%82%92%E5%B0%8E%E5%85%A5/</guid>
      <description>参考：Generate And Install A Let&amp;rsquo;s Encrypt SSL Certificate For A Bitnami Application
基本は以下のbitnami提供のToolを実行するだけでOK
sudo /opt/bitnami/bncert-tool 対話形式で以下の事項が聞かれるので回答
サイトのドメイン名 このタイミングでAレコードに上記ドメイン &amp;lt;-&amp;gt; 当該ホストのIP が設定されてないと、名前解決できないというエラーが出るので事前にDNSレコード（Aレコード）を設定しておくのがベター wwwドメインを設定するか メールアドレス 最終確認 </description>
    </item>
    
    <item>
      <title>php-fpmのパラメータ設定</title>
      <link>https://ny1030.github.io/pages/posts/engineering/php-fpm%E3%81%AE%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF/</link>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/php-fpm%E3%81%AE%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF/</guid>
      <description>PHP-FPM Process Caluculator - Chris Moore を用いて計算するのが良い。 vCPU: 1, Memory: 1GBだと以下で設定している：
pm=static pm.max_children=3 pm.max_requests=100 </description>
    </item>
    
    <item>
      <title>FlutterでiOSアプリをTestFlightでリリースする手順</title>
      <link>https://ny1030.github.io/pages/posts/engineering/flutter%E3%81%A7ios%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92testflight%E3%81%A7%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%99%E3%82%8B%E6%89%8B%E9%A0%86/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/flutter%E3%81%A7ios%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92testflight%E3%81%A7%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%99%E3%82%8B%E6%89%8B%E9%A0%86/</guid>
      <description>前提 Apple Developer アカウントは作成済み Xcodeをインストールした端末（MacBookなど）が手元にある [Xcode] Xcodeプロジェクトの設定 {project_root}/ios/Runner.xcodeproj をXcodeで開き、Auto-Signningやアイコンの画像など諸々の設定を実施する。基本は以下のFlutterドキュメントに倣って設定すれば良い。 https://docs.flutter.dev/deployment/ios#review-xcode-project-settings [Flutter] ビルドの実施 {project_root}で以下を実施する。 flutter clean flutter build ipa -&amp;gt; 上記の結果として、build/ios/archive/Runner.xcarchive が出力される。
[Xcode] TestFlightに配信 build/ios/archive/Runner.xcarchive をXcodeで開く Distribute App -&amp;gt; App Store Connect -&amp;gt; Upload を順にクリック 以下はデフォルトのままの設定にしている Review画面が出てくるので、確認しUploadをクリックし暫く待つ [Browser] TestFlightで任意のグループやユーザにアプリを配信 https://appstoreconnect.apple.com/ を開き、My Apps -&amp;gt; Test Flightへ 以下のように +ボタンから任意のグループやユーザを追加する -&amp;gt; 追加されると以下のようなメールが各ユーザに届くので、メールのLinkからアプリをDownloadする。 {APP_NAME} for iOS is now available to test. Tips App Store Connect でアプリの申請をするときにアプリのスクショをiPhone, iPad用それぞれで提出する必要がある。画像の解像度が各要件を満たしてないとアップロードできないので、とりあえずアップロードしたい場合は、以下のImagemagicのコマンドでオリジナル画像をリサイズすることでアップロードできた。
*前提として、変換する画像は４枚（IMG0[1~4].PNG）
#iPhone 6.5inch用 convert -resize 1284x2778! IMG01.PNG 6_5in_01.png convert -resize 1284x2778!</description>
    </item>
    
    <item>
      <title>MySQL, MaridDBでスロークエリを出力する設定</title>
      <link>https://ny1030.github.io/pages/posts/engineering/mysql-mariddb%E3%81%A7%E3%82%B9%E3%83%AD%E3%83%BC%E3%82%AF%E3%82%A8%E3%83%AA%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B%E8%A8%AD%E5%AE%9A/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/mysql-mariddb%E3%81%A7%E3%82%B9%E3%83%AD%E3%83%BC%E3%82%AF%E3%82%A8%E3%83%AA%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B%E8%A8%AD%E5%AE%9A/</guid>
      <description>1. 記録するログファイルを作成 今回は例として、 /tmp にslow.log を作成し、このファイルにスロークエリを記録するようにする。
ファイル作成&amp;amp;権限付与： touch /tmp/slow.log sudo chown mysql:mysql -R /tmp/slow.log 権限確認 ls -l output: -rw-r--r-- 1 mysql mysql 451 Jun 22 17:21 slow.log -&amp;gt; ownerがmysqlになっている
2. スロークエリを出力する設定を有効化 MySQLの設定ファイルである my.cnf にスロークエリを出力する設定を入れる。今回は５秒以上のクエリを出力する。 /etc/my.cnf にあるファイルを開き、以下を記載：
[mysqld] ... long_query_time=5 slow_query_log_file=/tmp/slow.log slow_query_log=1 ... 記載できたらMySQLを再起動
service restart mysqld 3.確認 MySQLにログインし、以下のクエリを実行
SELECT SLEEP(5); /tmp/slow.logを確認すると、無事にスロークエリとして出力されていた。
... # Time: 220622 17:21:43 # User@Host: root[root] @ localhost [] # Thread_id: 118 Schema: QC_hit: No # Query_time: 5.</description>
    </item>
    
    <item>
      <title>Spring Boot のJDBCコネクションプール（HikariCP）のロギング方法</title>
      <link>https://ny1030.github.io/pages/posts/engineering/spring-boot-%E3%81%AEjdbc%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%97%E3%83%BC%E3%83%ABhikaricp%E3%81%AE%E3%83%AD%E3%82%AE%E3%83%B3%E3%82%B0%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/spring-boot-%E3%81%AEjdbc%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%97%E3%83%BC%E3%83%ABhikaricp%E3%81%AE%E3%83%AD%E3%82%AE%E3%83%B3%E3%82%B0%E6%96%B9%E6%B3%95/</guid>
      <description>やりたいこと Spring Boot で オンラインアプリケーションを作成した時に、DBとの接続をコネクションプール（以降コネプ）を用いる時に、コネプのサイズが適正かどうかを確認するためにログに使用状況を出したい。 *前提として、使用するコネプライブラリはSpring Boot 2.0のデフォルトであるHikariCPとする。
設定方法の例 logback.xmlに以下のようなloggerディレクティブを追加する。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;appender name=&amp;#34;STDOUT&amp;#34; class=&amp;#34;ch.qos.logback.core.ConsoleAppender&amp;#34;&amp;gt; &amp;lt;encoder&amp;gt; &amp;lt;pattern&amp;gt;%msg%n&amp;lt;/pattern&amp;gt; &amp;lt;/encoder&amp;gt; &amp;lt;/appender&amp;gt; &amp;lt;logger name=&amp;#34;com.zaxxer.hikari&amp;#34; level=&amp;#34;DEBUG&amp;#34; additivity=&amp;#34;false&amp;#34;&amp;gt; &amp;lt;appender-ref ref=&amp;#34;STDOUT&amp;#34;/&amp;gt; &amp;lt;/logger&amp;gt; &amp;lt;root level=&amp;#34;INFO&amp;#34;&amp;gt; &amp;lt;appender-ref ref=&amp;#34;STDOUT&amp;#34; /&amp;gt; &amp;lt;/root&amp;gt; &amp;lt;/configuration&amp;gt; 上記設定をおこなうことで、以下のようなコネプ使用状況のログが30秒間隔で出力されることを確認。
... 2020-06-04T02:26:18+00:00 serviceA.xxxxxx.debug {&amp;#34;hostName&amp;#34;:&amp;#34;xxxxxx&amp;#34;,&amp;#34;level&amp;#34;:&amp;#34;DEBUG&amp;#34;,&amp;#34;time&amp;#34;:&amp;#34;2020-06-04T02:26:18.473763Z&amp;#34;,&amp;#34;message&amp;#34;:&amp;#34;HikariPool-2 - Pool stats (total=10, active=0, idle=10, waiting=0)&amp;#34;} 2020-06-04T02:26:47+00:00 serviceA.xxxxxx.debug {&amp;#34;hostName&amp;#34;:&amp;#34;xxxxxx&amp;#34;,&amp;#34;level&amp;#34;:&amp;#34;DEBUG&amp;#34;,&amp;#34;time&amp;#34;:&amp;#34;2020-06-04T02:26:47.881731Z&amp;#34;,&amp;#34;message&amp;#34;:&amp;#34;HikariPool-1 - Pool stats (total=20, active=0, idle=20, waiting=0)&amp;#34;} 2020-06-04T02:26:48+00:00 serviceA.xxxxxx.debug {&amp;#34;hostName&amp;#34;:&amp;#34;xxxxxx&amp;#34;,&amp;#34;level&amp;#34;:&amp;#34;DEBUG&amp;#34;,&amp;#34;time&amp;#34;:&amp;#34;2020-06-04T02:26:48.473995Z&amp;#34;,&amp;#34;message&amp;#34;:&amp;#34;HikariPool-2 - Pool stats (total=10, active=0, idle=10, waiting=0)&amp;#34;} ... messageに出力されている内容を抜粋すると以下の通り。
HikariPool-2 - Pool stats (total=10, active=0, idle=10, waiting=0) それぞれ説明すると、</description>
    </item>
    
    <item>
      <title>RDS CLI</title>
      <link>https://ny1030.github.io/pages/posts/engineering/rds-cli/</link>
      <pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/rds-cli/</guid>
      <description> インスタンス情報をCSV出力（ヘッダなし） aws rds describe-db-instances --query &amp;#34;DBInstances[].[DBInstanceIdentifier,DBInstanceClass,Engine,EngineVersion]&amp;#34; | jq -r &amp;#34;.[] | @csv&amp;#34; &amp;gt; rds_describe-db-instances.csv インスタンス情報をCSV出力（ヘッダあり） aws rds describe-db-instances --query &amp;#34;DBInstances[].[DBInstanceIdentifier,DBInstanceClass,Engine,EngineVersion]&amp;#34; | jq -r &amp;#39;[&amp;#34;DBInstanceIdentifier&amp;#34;,&amp;#34;DBInstanceClass&amp;#34;,&amp;#34;Engine&amp;#34;,&amp;#34;EngineVersion&amp;#34;],(.[])|@csv&amp;#39; &amp;gt; rds_describe-db-instances_with-header.csv </description>
    </item>
    
    <item>
      <title>VSCodeで引数付きのプログラムをデバッグモードで動かす時の設定例</title>
      <link>https://ny1030.github.io/pages/posts/engineering/vscode%E3%81%A7%E3%81%AE%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%83%A2%E3%83%BC%E3%83%89%E7%94%A8%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%BE%8B/</link>
      <pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/vscode%E3%81%A7%E3%81%AE%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%83%A2%E3%83%BC%E3%83%89%E7%94%A8%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%BE%8B/</guid>
      <description>Python 以下のような引数付きのPythonスクリプトをVSCode上のデバッグモードで実行する場合
コマンド python 03_filter.py ../data/1653823316.json VSCode上の設定（launch.json） { &amp;#34;version&amp;#34;: &amp;#34;0.2.0&amp;#34;, &amp;#34;configurations&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Launch Python&amp;#34;, &amp;#34;program&amp;#34;: &amp;#34;03_filter.py&amp;#34;, &amp;#34;cwd&amp;#34;: &amp;#34;${workspaceFolder}/app/script&amp;#34;, &amp;#34;request&amp;#34;: &amp;#34;launch&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;python&amp;#34;, &amp;#34;args&amp;#34;: [&amp;#34;../data/1653823316.json&amp;#34;] } ] } 上記のような設定をすることで動くことを確認。補足として、cwd (change work directory) を入れないと、実行した際に ../data/1653823316.json not found みたいなエラーが出たので、相対パスでファイルを読み込むコマンドを実行する時は入れておいたほうがいい。
Nodejs コマンド node 11_post.js ../data/1655618612.json VSCode上の設定（launch.json） { &amp;#34;version&amp;#34;: &amp;#34;0.2.0&amp;#34;, &amp;#34;configurations&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Launch Node (11_post.js)&amp;#34;, &amp;#34;program&amp;#34;: &amp;#34;11_post.js&amp;#34;, &amp;#34;cwd&amp;#34;: &amp;#34;${workspaceFolder}/app/script&amp;#34;, &amp;#34;request&amp;#34;: &amp;#34;launch&amp;#34;, &amp;#34;args&amp;#34;: [&amp;#34;../data/1655618612.json&amp;#34;], &amp;#34;runtimeExecutable&amp;#34;: &amp;#34;/usr/local/bin/node&amp;#34;, &amp;#34;skipFiles&amp;#34;: [ &amp;#34;&amp;lt;node_internals&amp;gt;/**&amp;#34; ], &amp;#34;type&amp;#34;: &amp;#34;node&amp;#34; } ] } </description>
    </item>
    
    <item>
      <title>nodejsでCSVファイルを作成する</title>
      <link>https://ny1030.github.io/pages/posts/engineering/nodejs%E3%81%A7csv%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%93%E3%81%A0%E3%82%8A%E6%9B%B8%E3%81%8D%E5%87%BA%E3%81%97%E3%81%9F%E3%82%8A%E3%81%99%E3%82%8B/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/nodejs%E3%81%A7csv%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%93%E3%81%A0%E3%82%8A%E6%9B%B8%E3%81%8D%E5%87%BA%E3%81%97%E3%81%9F%E3%82%8A%E3%81%99%E3%82%8B/</guid>
      <description>CSVファイルを読み込む let datas = fs.readFileSync(&amp;#39;data/chart/1m_&amp;#39; + code + &amp;#39;.csv&amp;#39;).toString().split(&amp;#34;\r\n&amp;#34;); </description>
    </item>
    
    <item>
      <title>RDSパラメータ確認CLI</title>
      <link>https://ny1030.github.io/pages/posts/engineering/rds%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E7%A2%BA%E8%AA%8Dcli/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/rds%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E7%A2%BA%E8%AA%8Dcli/</guid>
      <description> 特定のパラメータの値をチェック </description>
    </item>
    
    <item>
      <title>EC2インスタンス/AMI/Snapshotにタグを付与</title>
      <link>https://ny1030.github.io/pages/posts/engineering/ec2%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AB%E3%82%BF%E3%82%B0%E3%82%92%E4%BB%98%E4%B8%8E/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/ec2%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AB%E3%82%BF%E3%82%B0%E3%82%92%E4%BB%98%E4%B8%8E/</guid>
      <description>単発実行 AMI 現在のインスタンスのTagの状態を確認 aws ec2 describe-images --image-ids ami-xxxxxx タグを付与(例として system:front というTagを付与する) aws ec2 create-tags --resources ami-ffa5df99 --tags Key=system,Value=front ⇨再度実行しても同じKey/Valueなら結果は変わらないことを確認
systemのタグが付いてるリソースを列挙 aws ec2 describe-images --filter Name=&amp;#34;tag-key&amp;#34;,Values=&amp;#34;system&amp;#34; ワイルドカードによる検索も可能 aws ec2 describe-images --filter Name=&amp;#34;tag-key&amp;#34;,Values=&amp;#34;sys*&amp;#34; タグのKeyが system の値を取得 aws ec2 describe-images --image-ids ami-xxxxxx | jq &amp;#39;.Snapshots[] | [ .Tags[] | select(.Key == &amp;#34;system&amp;#34;).Value]&amp;#39; Snapshot 現在のTagの状態を確認
snapshotIdをキーに確認する場合 VolumeId=$(aws ec2 describe-snapshots --snapshot-ids snap-xxxxxx | jq .Snapshots[].VolumeId | tr -d &amp;#39;&amp;#34;&amp;#39;) aws ec2 describe-volumes --volume-ids $VolumeId AMIのImageIdをキーに確認する場合 SnapshotId=$(aws ec2 describe-images --image-ids ami-xxxxxxx | jq .</description>
    </item>
    
    <item>
      <title>Terraformのお作法</title>
      <link>https://ny1030.github.io/pages/posts/engineering/terraform%E3%81%AE%E3%81%8A%E4%BD%9C%E6%B3%95/</link>
      <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/terraform%E3%81%AE%E3%81%8A%E4%BD%9C%E6%B3%95/</guid>
      <description>基本コンセプト Composition コンポジションはインフラモジュールの集合体であり、論理的に分離された複数の領域（例：AWSリージョン、複数のAWSアカウント）にまたがることが可能である。コンポジションは、組織全体やプロジェクトに必要な完全なインフラストラクチャを表現するために使用される。
コンポジションは、インフラストラクチャーモジュールで構成され、リソースモジュールで構成され、個々のリソースを実装する。 作成すべきファイル main.tf: モジュール、ローカル、データソースを呼び出して、すべてのリソースを作成 outpputs.tf: main.tfで作成されたリソースからの出力 variables.tf: main.tfで使用される変数の宣言 terraform.tfvars: 環境特有の変数の値を宣言 ref: https://github.com/antonbabenko/terraform-best-practices/tree/master/examples/large-terraform/stage</description>
    </item>
    
    <item>
      <title>JSONで定義したURLの置換ルールをPythonで変換する</title>
      <link>https://ny1030.github.io/pages/posts/engineering/json%E3%81%A7%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9Furl%E3%81%AE%E7%BD%AE%E6%8F%9B%E3%83%AB%E3%83%BC%E3%83%AB%E3%82%92python%E3%81%A7%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/json%E3%81%A7%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9Furl%E3%81%AE%E7%BD%AE%E6%8F%9B%E3%83%AB%E3%83%BC%E3%83%AB%E3%82%92python%E3%81%A7%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B/</guid>
      <description>概要 ApacheやNginx、ELBのアクセスログの集計などをする時に以下のような変換を行う必要がある。
Input:
timestamp,backend_processing_time_msec,alb_status_code,backend_status_code,target_status_code_list,method,URL 2021-12-01T03:50:00.115676Z,182,201,201,201,POST,https://api.test.io:443/service1/v2/jp/cart/7219b08ec8464865a6020bb6025cd641/details 2021-12-01T03:50:20.597508Z,67,200,200,200,GET,https://api.test.io:443/service2/v2/jp/history/0130050002112010350-8052922 2021-12-01T03:50:20.613452Z,145,200,200,200,GET,https://api.test.io:443/service2/v2/jp/history?display_results=5&amp;amp;search_page=1 2021-12-01T03:50:20.894114Z,22,200,200,200,GET,https://api.test.io:443/service2/v2/jp/history/0130050002112010350-8052921 2021-12-01T03:51:45.903017Z,8,404,404,404,DELETE,https://api.test.io:443/service3/v1/jp/reserve/7041b995fa1b4c8b99543acc50c60865 2021-12-01T03:54:41.598315Z,20,200,200,200,GET,https://api.test.io:443/service3/v1/jp/stocks?code_list=11111111%22222222%33333333 2021-12-01T03:54:56.672346Z,165,200,200,200,GET,https://api.test.io:443/service4/v1/jp/pay/accesstoken?device_id=AAAAA-BBBB-CCC ⬇️ URLの正規化（≒変換, 名寄せ）
Output:
timestamp,backend_processing_time_msec,alb_status_code,backend_status_code,method,URL 2021-12-01T03:50:00.115676Z,182.0,201,201,POST,https://api.test.io:443/service1/v2/jp/cart/{cart_no}/details 2021-12-01T03:50:20.597508Z,67.0,200,200,GET,https://api.test.io:443/service2/v2/jp/history/{order_no} 2021-12-01T03:50:20.613452Z,145.0,200,200,GET,https://api.test.io:443/service2/v2/jp/history 2021-12-01T03:50:20.894114Z,22.0,200,200,GET,https://api.test.io:443/service2/v2/jp/history/{order_no} 2021-12-01T03:51:45.903017Z,8.0,404,404,DELETE,https://api.test.io:443/service3/v1/jp/reserve/{cart_no} 2021-12-01T03:54:41.598315Z,20.0,200,200,GET,https://api.test.io:443/service3/v1/jp/stocks 2021-12-01T03:54:56.672346Z,165.0,200,200,GET,https://api.test.io:443/service4/v1/jp/pay/accesstoken 上記のような変換を行うことで、APIのEndpointごとにコール回数やレスポンス時間など統計処理をPandasなどを行うことができる。
コード 概要で説明したような事を実現するために、以下のコードを作成。
1. URLの変換パターンを定義した設定ファイル（JSON） 置換のパターンはAPIの定義書などを参考に記述するのが良い（ない場合はアクセスログからリバースするしかない&amp;hellip;） { &amp;#34;^(.*)/history/[0-9]{12,19}-[0-9]{5,7}&amp;#34;: &amp;#34;\\1/history/{order_no}&amp;#34;, &amp;#34;^(.*)(cart|reserve)/[0-9a-z]{32}&amp;#34;: &amp;#34;\\1\\2/{cart_no}&amp;#34; } 2. inputしたCSVからURLの変換処理を行うスクリプト（Python） タイトル詐欺になるが、クエリパラメータに関する置換はルールが単純なのでJSONでは定義せず、こちらのスクリプトで定義・処理している（# REMOVE QUERY PARAMETERのセクション）。 import pandas as pd import json input_filename = &amp;#39;./input.csv&amp;#39; output_filename = &amp;#39;./output.csv&amp;#39; input_csv = pd.read_csv( input_filename, sep=&amp;#39;,&amp;#39;, usecols=lambda x: x in [&amp;#39;timestamp&amp;#39;,&amp;#39;alb_status_code&amp;#39;, &amp;#39;backend_status_code&amp;#39;, &amp;#39;method&amp;#39;, &amp;#39;URL&amp;#39;, &amp;#39;backend_processing_time_msec&amp;#39;], index_col=&amp;#39;timestamp&amp;#39;, dtype={&amp;#39;timestamp&amp;#39;: str, &amp;#39;alb_status_code&amp;#39;: str, &amp;#39;backend_status_code&amp;#39;: str, &amp;#39;method&amp;#39;: str, &amp;#39;URL&amp;#39;: str, &amp;#39;backend_processing_time_msec&amp;#39;: &amp;#39;float16&amp;#39;} ) # REMOVE QUERY PARAMETER input_csv = pd.</description>
    </item>
    
    <item>
      <title>pip Commands</title>
      <link>https://ny1030.github.io/pages/posts/engineering/pip-commands/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/pip-commands/</guid>
      <description>install 済みのパッケージ pip list
特定パッケージのインストール場所などの詳細情報 pip show jupyter</description>
    </item>
    
    <item>
      <title>AWS-CLI ECR Commands</title>
      <link>https://ny1030.github.io/pages/posts/engineering/aws-ecr-commands/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/aws-ecr-commands/</guid>
      <description>imageDigest を確認 e.g. apple というECRリポジトリの developタグ aws ecr describe-images --repository-name apple --image-ids imageTag=develop | jq .imageDetails[].imageDigest イメージのPull 1. 認証 aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 12345678.dkr.ecr.ap-northeast-1.amazonaws.com 補足 AWSアカウントIDは例として12345678とする ECRの接続情報はFQDNまたはURL（htttps://~）どちらの表記でも上手くいった。 --region で指定するリージョンは、ECRリポジトリと同じリージョンにする（us-east-1では無いので注意） ecr:GetAuthorizationToken のRoleが必要なので事前に権限付与しておく TroubleShooting 以下のエラーが出る場合がある
Error saving credentials: error storing credentials - err: exit status 1, out: `Post &amp;#34;http://ipc/registry/credstore-updated&amp;#34;: dial unix Library/Containers/com.docker.docker/Data/backend.sock: connect: connection refused` Qiitaの記事 を参考に、$HOME/.docker/config.json の credsStore の項目を削除することでエラーが消えることを確認（ただし、あくまで応急的な対応）
2. Pull docker pull 12345678.dkr.ecr.ap-northeast-1.amazonaws.com/{repository_name}/{image_name}:{tag_name} ↓ docker images でPullできたことを確認 補足 ecr:BatchGetImage のRoleが必要 </description>
    </item>
    
    <item>
      <title>Oracle SQLs</title>
      <link>https://ny1030.github.io/pages/posts/engineering/oracle-sqls/</link>
      <pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/oracle-sqls/</guid>
      <description>一般用途 {USER_NAME } というユーザのオブジェクト権限確認 SELECT grantee, table_name, privilege FROM dba_tab_privs WHERE grantee = &amp;#39;USER_NAME&amp;#39;; SYSDBA権限をもつユーザ確認 SELECT * FROM V$PWFILE_USERS; 初期化パラメータの一覧 SELECT name,display_value,default_value,isdefault,description FROM V$PARAMETER; 隠しパラメータを調べる select ksppinm as &amp;#34;parameter&amp;#34;, ksppstvl as &amp;#34;value&amp;#34; from x$ksppi join x$ksppcv using (indx) where ksppinm = &amp;#39;{隠しパラメータ名}&amp;#39;; 特定用途 気になるパラメータチェック SELECT name,display_value,default_value,isdefault,description FROM V$PARAMETER WHERE name IN (&amp;#39;client_statistics_level&amp;#39;) OR name like &amp;#39;_optim%&amp;#39;; 気になる隠しパラメータ select ksppinm as &amp;#34;parameter&amp;#34;, ksppstvl as &amp;#34;value&amp;#34; from x$ksppi join x$ksppcv using (indx) where ksppinm IN (&amp;#39;_optimizer_use_stats_on_conventional_dml&amp;#39;,&amp;#39;_optimizer_gather_stats_on_conventional_dml&amp;#39;); TODO:</description>
    </item>
    
    <item>
      <title>GCPのアラート情報をDiscordに通知する</title>
      <link>https://ny1030.github.io/pages/posts/engineering/gcp%E3%81%AE%E3%82%A2%E3%83%A9%E3%83%BC%E3%83%88%E6%83%85%E5%A0%B1%E3%82%92discord%E3%81%AB%E9%80%9A%E7%9F%A5%E3%81%99%E3%82%8B/</link>
      <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/gcp%E3%81%AE%E3%82%A2%E3%83%A9%E3%83%BC%E3%83%88%E6%83%85%E5%A0%B1%E3%82%92discord%E3%81%AB%E9%80%9A%E7%9F%A5%E3%81%99%E3%82%8B/</guid>
      <description>やりたいこと 運用しているシステムで時折、CPU使用率が100%を超過しアクセス不可になる。 Compute Engine（GCE）のインスタンスを再起動することで上記事象は直るので、復旧時間を短くするために、通知することでできるだけ早く気付けるようにする。 通知先として、スマホから手軽に見れてWebhookで楽に設定できるDiscordを使ってみる。 通知のロジックを超カンタンな図で表すと以下のような形： やったこと 通知ポリシーの作成（GCP管理画面） GCEのCPU使用率が95%以上の状態が何分間以上続いたら通知するか、といった条件をGCPの管理画面から設定する。これはGCEの画面のオブザーバビリティのタブから画像のように設定。 通知チャンネルの作成（GCP管理画面） 通知ポリシーと似た名前だがこちらは通知先を設定するサービス。画像の通りSlackやWebhook、（見えてないけど）SMSやEmailの設定が可能。今回はDiscordに通知したかったので通知したいDiscordチャンネルのWebhook URLを設定。 トラブルシューティング 上記の設定を終えたところで、通知チャンネルから「TEST CONNECTION」があったので試しに実行。 「successfully sent」と出ているがDiscordチャンネルを見るとメッセージが届いてない。。
GCP側のログ確認 Cloud Logging で 確認したところ、同タイミングで400エラーが出ていることを確認 😇 curlで送ってみる 件のDiscordにcurlで試しにPOSTをしてみたところ、
$ curl -H &amp;#39;Content-Type: application/json&amp;#39; -d &amp;#39;{&amp;#34;data&amp;#34;: &amp;#34;Hello World&amp;#34;}&amp;#39; https://discord.com/api/webhooks/{YOUR_PATH} {&amp;#34;message&amp;#34;: &amp;#34;Cannot send an empty message&amp;#34;, &amp;#34;code&amp;#34;: 50006} というメッセージが返ってきた。status codeを調べると400なのでGCPと同じエラーっぽい。
微修正して以下のようなPOSTをしたところ通知が成功。
$ curl -H &amp;#39;Content-Type: application/json&amp;#39; -d &amp;#39;{&amp;#34;content&amp;#34;: &amp;#34;Hello World&amp;#34;}&amp;#39; https://discord.com/api/webhooks/{YOUR_PATH} どうやらdiscordではJSONのpayloadに設定する key が &amp;ldquo;content&amp;rdquo; じゃないとエラーになる模様。なのでGCPではおそらく、content以外の key名を設定していてエラーが返ってきている？
最終的にCloud Function で実装 以上のような経緯でWebhookで単純に送ることはできなかったため、同じような人がいないか調べたところ Cloud Functions で自前で作るのが良いとのこと。以下のような手順でCloud Functionsで実装を試してみた。</description>
    </item>
    
    <item>
      <title>Webhookの疎通テスト</title>
      <link>https://ny1030.github.io/pages/posts/engineering/webhook%E3%81%AE%E7%96%8E%E9%80%9A%E3%83%86%E3%82%B9%E3%83%88/</link>
      <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/webhook%E3%81%AE%E7%96%8E%E9%80%9A%E3%83%86%E3%82%B9%E3%83%88/</guid>
      <description>こちら</description>
    </item>
    
    <item>
      <title>Google DriveにあるファイルをOCRするPythonスクリプト</title>
      <link>https://ny1030.github.io/pages/posts/engineering/google-drive%E3%81%AB%E3%81%82%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92ocr%E3%81%99%E3%82%8Bpython%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/google-drive%E3%81%AB%E3%81%82%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92ocr%E3%81%99%E3%82%8Bpython%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</guid>
      <description>from __future__ import print_function import pickle import os.path from googleapiclient.discovery import build from google_auth_oauthlib.flow import InstalledAppFlow from google.auth.transport.requests import Request # If modifying these scopes, delete the file token.pickle. SCOPES = [&amp;#39;https://www.googleapis.com/auth/drive.metadata.readonly&amp;#39;] def main(): &amp;#34;&amp;#34;&amp;#34;Shows basic usage of the Drive v3 API. Prints the names and ids of the first 10 files the user has access to. &amp;#34;&amp;#34;&amp;#34; creds = None # The file token.pickle stores the user&amp;#39;s access and refresh tokens, and is # created automatically when the authorization flow completes for the first # time.</description>
    </item>
    
    <item>
      <title>Linux - メモリ使用率について</title>
      <link>https://ny1030.github.io/pages/posts/engineering/linux-%E3%83%A1%E3%83%A2%E3%83%AA%E4%BD%BF%E7%94%A8%E7%8E%87%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/linux-%E3%83%A1%E3%83%A2%E3%83%AA%E4%BD%BF%E7%94%A8%E7%8E%87%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>freeコマンド total : 合計 used : カーネルとプロセスが使用している shared : tmpfsに使われている free : 余っている buffers : バッファキャッシュのメモリサイズ cache : ページキャッシュのメモリサイズ available : 実質的な空きメモリ free + buff/cache (解放可能な部分) sar コマンド 物理メモリ使用量が表示される = buffers, cacheが含まれた使用量 sar -r でメモリ使用状況を確認する - ablog</description>
    </item>
    
    <item>
      <title>Command(Snipet)メモ</title>
      <link>https://ny1030.github.io/pages/posts/engineering/commandsnipet%E3%83%A1%E3%83%A2/</link>
      <pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/commandsnipet%E3%83%A1%E3%83%A2/</guid>
      <description>ここではなくgistに記載</description>
    </item>
    
    <item>
      <title>SQLパフォーマンスチューニング</title>
      <link>https://ny1030.github.io/pages/posts/engineering/sql%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/sql%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/</guid>
      <description>Level 0 実行計画(Query Plan)の読み方 以下のようなSQLの実行計画を取得してみる。
UPDATE T_ITEM_INBOUND t3 SET status_flag = &amp;#39;9&amp;#39; , updated_datetime = CURRENT_TIMESTAMP , updated_by = &amp;#39;APP_001&amp;#39; FROM ( SELECT t1.group_num , t1.level3_item_code FROM T_ITEM_INBOUND t1 WHERE t1.status_flag = &amp;#39;1&amp;#39; AND t1.group_num = &amp;#39;10&amp;#39; AND t1.level3_item_code = &amp;#39;1000-2000-3000&amp;#39; GROUP BY t1.group_num , t1.level1_item_code , t1.level2_item_code , t1.level3_item_code , t1.color_code , t1.size_code , t1.pattern_length_code HAVING 1 &amp;lt; COUNT(t1.group_num) ) t2 WHERE t3.status_flag = &amp;#39;1&amp;#39; AND t3.group_num = t2.group_num AND t3.</description>
    </item>
    
    <item>
      <title>Drupal関連のコマンド</title>
      <link>https://ny1030.github.io/pages/posts/engineering/drupal%E9%96%A2%E9%80%A3%E3%81%AE%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/drupal%E9%96%A2%E9%80%A3%E3%81%AE%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/</guid>
      <description>サービス再起動 bitnami drupal の場合 sudo /opt/bitnami/ctlscript.sh restart マイナーバージョンアップ ※スペック低すぎると失敗するので、4コア8GBに事前スケールアップした
バージョン確認 composer outdated &amp;quot;drupal/*&amp;quot;
druplaのrootディレクトリで以下を実行 sudo composer update drupal/core &amp;quot;drupal/core-*&amp;quot; --with-all-dependencies sudo composer update drupal/core --with-dependencies
参考
housekeeping(キャッシュ削除) drush -y wd-del all
リダイレクト設定 こちらの通りに設定 installdir/apache2/conf/vhosts/APPNAME-vhost.conf に設定を書けば良い</description>
    </item>
    
    <item>
      <title>WSL2を入れた後にやるカスタマイズ</title>
      <link>https://ny1030.github.io/pages/posts/engineering/wsl2%E3%82%92%E5%85%A5%E3%82%8C%E3%81%9F%E5%BE%8C%E3%81%AB%E3%82%84%E3%82%8B%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA/</link>
      <pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/wsl2%E3%82%92%E5%85%A5%E3%82%8C%E3%81%9F%E5%BE%8C%E3%81%AB%E3%82%84%E3%82%8B%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA/</guid>
      <description>※ OSは Ubuntu 20.04(LTS) を使用
まずはプロンプトを変更（ミニマルな内容にする） #1.まずは現在の設定確認 user@DESKTOP-XXXXX:~$ **echo $PS1** \\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ #2.PS1の値を書き換え user@DESKTOP-XXXXX:~$ **PS1=&amp;#39;\\[\\e[1;32m\\]\\W\\$ \\[\\e[m\\]&amp;#39;** ~$ #3.設定内容を永続化 ~$ **echo &amp;#34;PS1=&amp;#39;\\[\\e[1;32m\\]\\W\\$ \\[\\e[m\\]&amp;#39;&amp;#34; &amp;gt;&amp;gt; .bashrc** #4.ターミナルを再起動して、設定が永続化されてること確認 ~$ systemd を PID1（親プロセス）にする #1.現状のプロセスを確認 ~$ ps aux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.0 0.0 896 528 ? Sl 16:13 0:00 /init root 120 0.0 0.0 896 84 ? Ss 16:19 0:00 /init #2.dotnet-runtime-5.0などの依存モジュールをインストール wget &amp;lt;https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb&amp;gt; -O packages-microsoft-prod.</description>
    </item>
    
    <item>
      <title>Flutter 導入まとめ</title>
      <link>https://ny1030.github.io/pages/posts/engineering/flutter-%E5%B0%8E%E5%85%A5%E3%81%BE%E3%81%A8%E3%82%81/</link>
      <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/flutter-%E5%B0%8E%E5%85%A5%E3%81%BE%E3%81%A8%E3%82%81/</guid>
      <description>１．環境セットアップ（２時間くらい） Flutter １．SDKのダウンロード・解凍
Install
２．PATH設定
以下をPATHに追加（ホームディレクトリの名前は適宜変更する）
/Users/{username}/flutter/bin ３．確認
以下のコマンドが実行できることを確認する
flutter Android １．Android Studioダウンロード⇛インストール
Install
２．確認
flutter doctor ※最初は５分くらい時間かかる
の結果でAndroid Studioがチェックマーク入ってるのを確認 ４．Andoroid toolchainのエラー解消
・Command-Line Toolsのインストール（AndoroidSDKの設定画面からできる）
・Andoroidライセンスの許可
flutter doctor --android-licenses ※ javaのPATH通ってないとエラー出る
５．Android toolchainがチェックついてることを確認
flutter doctor ６．FlutterプラグインをAndoroid Studioからインストール
XCode（iOS） １．XCodeをインストール
２．Cocoapodをインストール
brew install cocoapods brew link --overwrite cocoapods ※バージョン指定している理由はエラー回避しようとした結果
３．XCodeにチェックがついてることを確認
flutter doctor ２．Flutterプロジェクト作成・デモアプリ実行（30分） １．以下のように作成
２．仮想デバイス（iOS）を実装
３．仮想デバイス（Andoroid）を実装 System Image：何でもいいらしいのでPieに ４．アプリの実行 Android： iOS：同じ見た目 Appendix．UIのデザインツール ３−１．Flutter Studio
WEB上でデザイン⇛コード生成できるが、
・慣れが必要そう、機能的にFigmaに劣ってそう
・コードを完全には使えない（クラス名がデフォルト、構文？が違う）
AppBuilder 2 20180529-19:35
３−２．Figma to Flutter</description>
    </item>
    
    <item>
      <title>ApacheのRedirect/Rewrite設定</title>
      <link>https://ny1030.github.io/pages/posts/engineering/apache%E3%81%AEredirect%E8%A8%AD%E5%AE%9A/</link>
      <pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/apache%E3%81%AEredirect%E8%A8%AD%E5%AE%9A/</guid>
      <description>www無しドメイン -&amp;gt; www有りドメインにリダイレクト 参考：Apache RewriteCond の基礎知識 | - WEB ARCH LABO {apache_dir}/conf/vhost
&amp;lt;VirtualHost *:80&amp;gt; ... &amp;lt;Directory &amp;#34;/opt/blog&amp;#34;&amp;gt; ... &amp;lt;/Directory&amp;gt; RewriteEngine On RewriteCond %{HTTP_HOST} !^www\. [NC] RewriteCond %{REQUEST_URI} !^/admin/ RewriteRule ^(.*)$ http://www.%{HTTP_HOST}%{REQUEST_URI} [R=301,L] ... &amp;lt;/VirtualHost&amp;gt; RewriteEngine On: このディレクティブを書かないとRewriteは動かない。言い換えるとここだけコメントアウトすればRewriteを無効にできる。 RewriteCond: この条件に合致（true）したらRewriteRuleにしたがってURLの書き換えをおこなう。 今回の例：サーバのホスト名%{HTTP_HOST} でwww.が先頭にない !^www\.とき。（大文字小文字は区別しない[NC]） RewriteCondを複数記述した場合はデフォルトではAND条件になる。ORにしたい場合は末尾に [OR] を指定する。 RewriteRule: URLの書き換えルールを書いている。リダイレクトのステータスコードを末尾に記載。 [L] をつけると振り分けが終わる（それ以降の処理は無視される）が、Rewrite後に再度評価が実行されるのでループに注意とのこと。再度評価をしたくない場合、[END] をつければいいとのこと。.htaccess に RewriteRule 書くときは、[L]フラグをつけても </description>
    </item>
    
    <item>
      <title></title>
      <link>https://ny1030.github.io/pages/posts/engineering/ga%E5%85%A5%E3%82%8C%E3%82%8B%E6%99%82%E3%81%AEcors%E5%AF%BE%E5%BF%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ny1030.github.io/pages/posts/engineering/ga%E5%85%A5%E3%82%8C%E3%82%8B%E6%99%82%E3%81%AEcors%E5%AF%BE%E5%BF%9C/</guid>
      <description>URL: https://www.googletagmanager.com/gtag/js?id={id} Referrer Policy: strict-origin-when-cross-origin
sudo mv /opt/bitnami/drupal/sites/default/default.services.yml /opt/bitnami/drupal/sites/default/services.yml </description>
    </item>
    
    
    
  </channel>
</rss>
